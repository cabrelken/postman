{
	"info": {
		"_postman_id": "9af02750-ed72-4129-bde1-7fe3173b601c",
		"name": "testAvecToken",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10035890",
		"_collection_link": "https://warped-shuttle-252676.postman.co/workspace/logwireTPtest~8817ba1e-40a6-4f0e-88b4-f7270259f317/collection/10035890-9af02750-ed72-4129-bde1-7fe3173b601c?action=share&source=collection_link&creator=10035890"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response must have the required Content-Type header with value 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Email field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('email');",
							"});",
							"",
							"",
							"pm.test(\"Email field is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Email field array is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password1\": \"admin123\",\r\n    \"password2\": \"admin123\",\r\n    \"email\": \"vctken@gmail.com\",\r\n    \"job\": \"Developer\",\r\n    \"about_me\": \"I am a developer.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register/",
					"host": [
						"{{url}}"
					],
					"path": [
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "allpost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the post object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(post => {",
							"        pm.expect(post).to.be.an('object');",
							"        pm.expect(post.id).to.be.a('number');",
							"        pm.expect(post.comments).to.be.an('array');",
							"        pm.expect(post.title).to.be.a('string');",
							"        pm.expect(post.content).to.be.a('string');",
							"        pm.expect(post.created_at).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the comments array within the post object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(post => {",
							"        pm.expect(post).to.have.property('comments').that.is.an('array').that.is.not.empty;",
							"",
							"        post.comments.forEach(comment => {",
							"            pm.expect(comment).to.be.an('object');",
							"            pm.expect(comment.id).to.be.a('number');",
							"            pm.expect(comment.user).to.be.a('string');",
							"            pm.expect(comment.content).to.be.a('string');",
							"            pm.expect(comment.created_at).to.be.a('string');",
							"            pm.expect(comment.post).to.be.a('number');",
							"        });",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Title, content, and created_at fields are present and non-empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(post) {",
							"    pm.expect(post.title).to.exist.and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"    pm.expect(post.content).to.exist.and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
							"    pm.expect(post.created_at).to.exist.and.to.have.lengthOf.at.least(1, \"Created_at should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/posts/",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "detailpost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field is present and a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Comments array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.comments).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Title, content, and created_at fields are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"  pm.expect(responseData.content).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
							"  pm.expect(responseData.created_at).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Created_at should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/posts/1/",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "postDetailById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the post object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('comments');",
							"    pm.expect(responseData).to.have.property('title');",
							"    pm.expect(responseData).to.have.property('content');",
							"    pm.expect(responseData).to.have.property('created_at');",
							"});",
							"",
							"",
							"pm.test(\"Comments array should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.comments).to.exist.and.to.be.an('array');",
							"    ",
							"    responseData.comments.forEach(function(comment) {",
							"        pm.expect(comment).to.be.an('object');",
							"        pm.expect(comment.id).to.exist.and.to.be.a('number');",
							"        pm.expect(comment.user).to.exist.and.to.be.a('string');",
							"        pm.expect(comment.content).to.exist.and.to.be.a('string');",
							"        pm.expect(comment.created_at).to.exist.and.to.be.a('string');",
							"        pm.expect(comment.post).to.exist.and.to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Created_at date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,6})?Z$/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/posts/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - refresh and access\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('refresh');",
							"    pm.expect(responseData).to.have.property('access');",
							"});",
							"",
							"",
							"pm.test(\"Refresh token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.refresh).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Access token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.access).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
							"});",
							"",
							" const responseData = pm.response.json();",
							"pm.collectionVariables.set(\"token\", responseData.access)",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"cken\",\r\n    \"password\": \"admin123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/login/",
					"host": [
						"{{url}}"
					],
					"path": [
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "accountInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - username, email, job, and about_me\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('username');",
							"    pm.expect(responseData).to.have.property('email');",
							"    pm.expect(responseData).to.have.property('job');",
							"    pm.expect(responseData).to.have.property('about_me');",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string');",
							"    pm.expect(responseData.email).to.match(/\\S+@\\S+\\.\\S+/);",
							"});",
							"",
							"",
							"pm.test(\"Job and about_me are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"  pm.expect(responseData.about_me).to.be.a('string').and.to.have.lengthOf.at.least(1, \"About me should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/me",
					"host": [
						"{{url}}"
					],
					"path": [
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "createComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, user, content, created_at, and post\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('user');",
							"    pm.expect(responseData).to.have.property('content');",
							"    pm.expect(responseData).to.have.property('created_at');",
							"    pm.expect(responseData).to.have.property('post');",
							"});",
							"",
							"",
							"pm.test(\"User is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Created_at is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,6})?Z$/, \"Created_at should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Post is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.post).to.be.a('number');",
							"    pm.expect(responseData.post).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"username\": \"cken\",\r\n    \"content\": \"new comment\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/posts/2/comments/",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"2",
						"comments",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "token",
			"type": "string"
		}
	]
}